name: Build and Release Dash Evo Tool

on:
  push:
    tags:
      - 'v*'
      - 'v*-dev.*'
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      tag:
        description: "Version (i.e. v0.1.0)"
        required: true

jobs:
  build-and-release:
    name: Build and Release Dash Evo Tool (ARM64 Only)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Set up QEMU to emulate ARM64 on the AMD64 host
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # ARM64 build in Docker with QEMU emulation
      - name: Build in ARM64 Docker container
        run: |
          docker run --platform linux/arm64 --rm -v $(pwd):/build -w /build arm64v8/ubuntu:latest /bin/bash -c "
            apt-get update &&
            apt-get install -y build-essential gcc-aarch64-linux-gnu libssl-dev curl unzip &&
            
            # Install protoc for ARM64
            curl -Lo /tmp/protoc.zip \
              https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-linux-aarch64.zip &&
            unzip /tmp/protoc.zip -d \$HOME/.local &&
            export PATH=\$PATH:\$HOME/.local/bin &&

            # Install Rust and cross-compilation toolchain
            curl https://sh.rustup.rs -sSf | sh -s -- -y &&
            source \$HOME/.cargo/env &&
            rustup target add aarch64-unknown-linux-gnu &&

            # Build the Rust project
            cargo build --release --target aarch64-unknown-linux-gnu
          "

      # Upload artifacts
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: dash-evo-tool-arm64
          path: target/aarch64-unknown-linux-gnu/release/dash-evo-tool
